pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'  // Only region is needed; IAM role handles authentication
    }
    stages {
        stage('Scanning Stage') {
            agent { label 'Sonartoken' } // Runs on the SonarQube agent
            steps {
                withSonarQubeEnv('spring') { 
                    sh "mvn clean verify Sonartoken:Sonartoken -Dsonar.projectKey=Spring"
                } 
            }
        }
        stage('Build Stage') {
            agent { label 'master' } // Runs on the Jenkins Master Node
            steps {
                sh 'mvn clean install'
            }
            post {
                success {
                    script {
                        def server = Artifactory.newServer(url: 'http://54.82.243.101:8081/artifactory/', credentialsId: 'jfrog')
                        def rtMaven = Artifactory.newMavenBuild()
                        rtMaven.deployer server: server, releaseRepo: 'libs-release/', snapshotRepo: 'libs-snapshot/'
                        rtMaven.tool = 'maven'
                        rtMaven.run(pom: 'pom.xml', goals: 'clean install')
                    }
                }
            }
        }
        stage('Deploy and Push to ECR') {
            agent { label 'deploy' } // Runs on the Deploy agent (EC2 instance with IAM Role)
            steps {
                script {
                    sh 'curl -o jenkins-test-1.0.jar http://54.82.243.101:8081/artifactory/libs-release/com/example/jenkins-test/1.0/jenkins-test-1.0.jar'
                    
                    sh '''
                        # AWS CLI will use the IAM Role attached to the EC2 instance
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin 804480554088.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                        docker build -t sstest .
                        docker tag sstest:latest 804480554088.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/sstest:latest
                        docker push 804480554088.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/sstest:latest
                        
                        # Update kubeconfig to interact with EKS
                        aws eks update-kubeconfig --region us-east-1 --name cluster-eksctl
                        kubectl apply -f manifest.yaml
                        sleep 10
                        kubectl get pods -n ss-dev
                        kubectl get svc -n ss-dev
                    '''
                }
            }
        }
    }
}
